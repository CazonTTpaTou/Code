/****************************************************************************
 *          S A S   S A M P L E   L I B R A R Y                 
 *
 *      NAME: IMPORTAD                                            
 *     TITLE: Metadata User Import From Active Directory
 *   PRODUCT: SAS
 *   VERSION: 9.1
 *    SYSTEM: ALL                                                 
 *      DATE: 03DEC2003
 *      DESC: Example code to extract user information from an Active 
 *            Directory and load it into the Metadata Server.
 *      KEYS: METADATA USER PERSON IDENTITYGROUP GROUP LOGIN
 *   UPDATED: Version 9.2  19Jul2006
 *
 ****************************************************************************/
 
 
/****************************************************************************
 ****************************************************************************
 **                                                                        **
 **  The following SAS Program is divided into 5 discrete sections in      **
 **  order to help simplify its overall organization.  Each SECTION is     **
 **  marked by a comment box like this one with "double bound" asterisk.   **
 **  Here is a summary of the sections:                                    **
 **                                                                        **
 **  SECTION 1: SAS Option, Macro Variable, and filename Definitions       ** 
 **                                                                        **
 **  SECTION 2: %mduimpc defines canonical datasets and variable lists.    **
 **                                                                        **
 **  SECTION 3: Extract User Information from Active Directory, normalize  **
 **             data, and create corresponding canonical datasets.         ** 
 **                                                                        **
 **  SECTION 4: Extract Group Information from Active Directory, normalize **
 **             data, and create corresponding canonical datasets.         ** 
 **                                                                        **
 **  SECTION 5: %mduimpl reads the canonical datasets, generates           **
 **             XML representing metadata objects, and invokes PROC        **
 **             METADATA to load the metadata.                             **
 **                                                                        **
 **  In order to run this program, you will modify the connection parms    **
 **  for the Active Directory Directory Server where user information is   **
 **  read from and the SAS Metadata Server that receives this information  **
 **  in the form of XML representing metadata objects.  These connection   ** 
 **  parms are found in SECTION 1 below.                                   **
 **                                                                        **
 **  CAUTION: before running this program, please read the SAS code below, **
 **  SECTION by SECTION to gain an understanding of its overall flow.  It  **
 **  is especially important to understand the ldap filters used to        **
 **  retrieve persons in SECTION 3.  Depending on the volume of defined    **
 **  users, your user selection criteria, and local site restrictions,     **
 **  the filters may require little or much modification.  Also note that  **
 **  the same principles apply for the ldap filters used to retrieve       **
 **  groups in SECTION 4.                                                  **
 **                                                                        **  
 **  NOTE: if a macro is defined with the name "_EXTRACTONLY", then        **
 **  no attempt will be made to load the user information into the         **
 **  metadata server.  Only the extraction of the user information from    **
 **  Active Directory and the creation of the canonical datasets. This     **
 **  will be used with synchronization processing.                         **
 **                                                                        **
 ****************************************************************************
 ****************************************************************************/ 

  
 
/****************************************************************************
 ****************************************************************************
 **                                                                        **
 **  SECTION 1: SAS Option, Macro Variable, and filename Definitions       ** 
 **                                                                        **
 ****************************************************************************
 ****************************************************************************/ 

/****************************************************************************/
/* Use the Meta* options to specify the metadata server connection options  */
/* where the user information will be loaded.                               */
/****************************************************************************/

/****************************************************************************/
/* The following macro variables supply connection parameters for the       */
/* Active Directory (AD) Server containing the user and group information.  */ 
/****************************************************************************/  

%let ADServer = "PHOTOWATT.local"; /* network name/address of   */
                                               /*   the AD server.          */

%let ADPort   = 389;                         /* Port on which LDAP interface*/
                                             /* is listening. 389 is a      */
                                             /* standard port.              */

%let ADPerBaseDN = "DC=photowatt,DC=local"; /* Specify the Distinguished */
                                             /* Name in the LDAP hierarchy  */
                                             /* where People searches begin.*/

%let ADGrpBaseDN = "OU=Groupes,DC=photowatt,DC=local"; /* Specify the Distinguished */
                                             /* Name in the LDAP hierarchy  */
                                             /* where Group searches begin. */


%let ADBindUser = "PWSASPROD@PHOTOWATT.local";      /* Userid which will connect   */
                                             /* to the AD server and extract*/
                                             /* the information.            */
                                             
%let ADBindPW = "PWs@sPROD";                  /* Password for Userid above.  */


/****************************************************************************/
/* Define the tag that will be included in the Context attribute of         */
/* ExternalIdentity objects associated with the information loaded by this  */
/* application.  This tag will make it easier to determine where information*/
/* originated from when synchronization tools become available.             */
/* Note, the value of this macro should not be quoted.                      */
/****************************************************************************/
%let ADExtIDTag = Active Directory Import;

/****************************************************************************/
/* This process will extract the ActiveDirectory information into datasets  */
/* in the libref represented by the "extractlibref" macro variable.  The    */
/* extracted information will be cleansed and normalized in these datasets  */
/* and then transferred into the canonical form datasets defined in the     */
/* %mduimpc macro.                                                          */
/*                                                                          */
/* Specify the library to where the ActiveDirectory information should      */
/* be extracted.                                                            */
/****************************************************************************/

%let extractlibref=work;

/****************************************************************************/
/* Choose the value that will be used as the keyid for Person information.  */
/* Choices are the DistinguishedName of the User entry or the employeeid.   */
/* For groups, the DistinguishedName will be used.                          */
/*                                                                          */
/* %let keyidvar=employeeID;                                                */
/* %let keyidvar=distinguishedName;                                         */
/****************************************************************************/
%let keyidvar=sAMaccountName;


/****************************************************************************/
/* Set the name of the AuthenticationDomain in the metadata to which logins */
/* created by the process should be associated.  Note, this name is not     */
/* required to be the same name as the windows domain. Logins from multiple */
/* windows domains can participate in the same metadata AuthenticationDomain*/
/* if the windows domains trust each other.                                 */
/****************************************************************************/
%let MetadataAuthDomain=DefaultAuth;


/****************************************************************************/
/* Set the name of the windows domain that should be prepended with a '\'   */
/* to each login created by this extraction.                                */
/****************************************************************************/
%let WindowsDomain=;

/****************************************************************************/
/* The importlibref macro variable declares the libref where the normalized */
/* datasets defined by the macro %mduimpc will be created in the processing */
/* below. It is VERY important to NOT change any &importlibref reference in */
/* the code below.  If you want to save the normalized datasets in a        */
/* specific library then uncomment libname xxxx 'your_path_name';.          */
/* supply your own path name, and change  %let importlibref=work; to        */
/* %let importlibref=xxxx; where xxxx is a libref name of your choosing.    */
/****************************************************************************/

/* libname xxxx 'your_path_name'; */
%let importlibref=ead;
 
/****************************************************************************/
/* filename for location where macro %mduimpl saves its generated XML.       */
/* This can be a fully qualified filename including the path and .xml       */
/* extension.                                                               */
/****************************************************************************/
filename keepxml "request.xml" lrecl=1024;
 

 
/****************************************************************************
 ****************************************************************************
 **                                                                        **
 **  SECTION 2: %mduimpc defines canonical datasets and variable lists.    **
 **                                                                        **
 ****************************************************************************
 ****************************************************************************/ 

/****************************************************************************/
/* Invoke the %mduimpc macro to generate the macro variables used           */
/* to define the canonical datasets and columns for input to the %mduimpl   */
/* macro. The %mduimpl (see SECTION 5: at end of program) macros            */
/* reads the canonical form datasets, builds an XML stream containing       */
/* user information, and loads this user information into the metadata      */
/* server specified in the meta options above.                              */
/****************************************************************************/
%mduimpc(libref=&importlibref,maketable=0);         



/****************************************************************************
 ****************************************************************************
 **                                                                        **
 **  SECTION 3: Extract User Information from Active Directory, normalize  **
 **             data, and create corresponding canonical datasets.         ** 
 **                                                                        **
 ****************************************************************************
 ****************************************************************************/ 

/****************************************************************************/
/* MACRO: ldapextrpersons                                                   */
/*                                                                          */
/* To extract user information from ActiveDirectory (AD), the LDAP datastep */
/* interface is used to connect and query AD.                               */
/*                                                                          */
/* This macro is used within a datastep which has established an ldap       */
/* connection.  Because some servers will limit the number of directory     */
/* entries retrieved on a single search, the datastep will be built with a  */
/* series of filters that are used in this macro to select the entries that */
/* will be processed by the macro.                                          */
/*                                                                          */
/* AD ships with standard schemas that define much of the information       */
/* needed here. However, the standard schema is often extended with         */
/* additional site-specific attributes.  If your site has extended the      */
/* scehma, you will need to obtain this information from your local Active  */
/* Directory administrator and modify the ldapextrpersons macro accordingly.*/
/****************************************************************************/

%macro ldapextrpersons;
       shandle=0;
       num=0;

       /* The attrs datastep variable contains a list of the ldap attribute */
       /* names from the standard schema. */
       attrs="displayName streetAddress cn company mail employeeID " ||
             "facsimileTelephoneNumber distinguishedName l "         ||
             "mobile otherTelephone physicalDeliveryOfficeName "     ||
             "postalCode name sAMAccountName st "                    ||
             "telephoneNumber co title whenChanged whenCreated department UserPasswordExpiryTimeComputed";
             
       /*****************************************************************/
       /* Call the SAS interface to search the LDAP directory.  Upon    */
       /* successful return, the shandle variable will contain a search */
       /* handle that identifies the list of entries returned in the    */
       /* search.  The num variable will contain the total number of    */
       /* result entries found during the search.                       */
       /*****************************************************************/
       call ldaps_search( handle, shandle, filter, attrs, num, rc );
       if rc NE 0 then do;
         msg = sysmsg();
         put msg;
         put filter=;
       end;

       do eIndex = 1 to num;
          numAttrs=0;
          entryname='';
    
          call ldaps_entry( shandle, eIndex, entryname, numAttrs, rc );
          if rc NE 0 then do;
             msg = sysmsg();
             put msg;
          end;

          /* initialize the entry variables */
          displayName=""; 
          streetAddress="";  
          cn="";      /* common name */
          company="";  
          mail="";    /* email address */
          employeeID="";  
          facsimileTelephoneNumber=""; 
          distinguishedName=""; 
          l="";       /* location - city */
          mobile="";  /* mobile phone */
          otherTelephone="";  
          physicalDeliveryOfficeName="";  
          postalCode="";  
          name=""; 
          sAMAccountName="";  
          st="";      /* state */
          telephoneNumber="";  
          co="";      /* country */
          title="";   /* job title */
          whenChanged=""; 
          whenCreated=""; 
		  departement="";
		  UserPasswordExpiryTimeComputed="";

          /* for each attribute, retrieve name and values */
          if (numAttrs > 0) then do aIndex = 1 to numAttrs;
          
             attrName='';
             numValues=0;
          
             call ldaps_attrName(shandle, eIndex, aIndex, attrName, numValues, rc);
             if rc NE 0 then do;
                put aIndex=;
                msg = sysmsg();
                put msg;
             end;

             /* get the 1st value of the attribute. */
             call ldaps_attrValue(shandle, eIndex, aIndex, 1, value, rc);
             if rc NE 0 then do;
                msg = sysmsg();
                put msg;
             end;

             /********************************************************************/
             /* All of the following attrName values are MS Base Schema Supplied */
             /********************************************************************/

             /* extract the displayName - Display-Name in */
             if (attrName = 'displayName')  then 
                displayName= value;
             /* extract the departement in */
             else if (attrName = 'department')  then 
                department= value;
             /* extract the msDS-UserPasswordExpiryTimeComputed in */
             else if (attrName = 'msDS-UserPasswordExpiryTimeComputed')  then 
                UserPasswordExpiryTimeComputed=put(value,8.);
             /* extract the streetAddress - Address */
             else if (attrName = 'streetAddress')  then  
                streetAddress= value;
             /* extract the cn - Common-Name */
             else if (attrName = 'cn')  then  
                cn= value;
             /* extract the Company - Company */
             else if (attrName = 'company')  then 
                company= value;
             /* extract the l - Locality-Name contains city/town */
             else if (attrName = 'l')  then 
                l= value;
             /* extract the mail - Email-Addresses (multi-valued) */
             else if (attrName = 'mail')  then 
                mail= value;
             /* extract the employeeID - Employee-ID */
             /*************************************************/
             /* employeeid may need to be normalized/cleansed */
             /*************************************************/

             else if (attrName = 'employeeID')  then  do;
                employeeID= compress(value, "<>""");
             end;
             /* extract the facsimileTelephoneNumber - Facsimile-Telephone-Number */
             else if (attrName = 'facsimileTelephoneNumber')  then 
                facsimileTelephoneNumber= value;
             /* extract the distinguishedName - Obj-Dist-Name */
             else if (attrName = 'distinguishedName')  then 
                distinguishedName= value;
             /* extract the mobile - Phone-Mobile-Primary */
             else if (attrName = 'mobile')  then  
                mobile= value;
             /* extract the otherTelephone - Phone-Office-Other  */
             else if (attrName = 'otherTelephone')  then 
                otherTelephone= value;
             /* extract the physicalDeliveryOfficeName  */
             else if (attrName = 'physicalDeliveryOfficeName')  then 
                physicalDeliveryOfficeName= value;
             /* extract the postalCode - Postal-Code */
             else if (attrName = 'postalCode')  then  
                postalCode= value;
             /* extract the name - RDN  (relative distinguished name) */
             else if (attrName = 'name')  then
                name= value;
             /* **extract the sAMAccountName - SAM-Account-Name */
             else if (attrName = 'sAMAccountName')  then 
                sAMAccountName= value;
             /* extract the st - State-Or-Province-Name */
             else if (attrName = 'st')  then  
                st= value;
             /* extract the telephoneNumber - Telephone-Number  */
             else if (attrName = 'telephoneNumber')  then 
                telephoneNumber= value;
             /* **extract the co - Text-Country */
             else if (attrName = 'co')  then  
                co= value;
             /* extract the title - Title */
             else if (attrName = 'title')  then
                title= value;
             /* extract the whenChanged - When-Changed */
             else if (attrName = 'whenChanged')  then
                whenChanged= value;
             /* extract the whenCreated - When-Created */
             else if (attrName = 'whenCreated')  then
                whenCreated= value;
                
          end;  /* end of attribute loop */

          /*******************************************************************/
          /* It is possible that the ldap query returns entries that do not  */
          /* represent actual persons that should be loaded into metadata.   */
          /* When one of these entries is encountered, skip adding the       */
          /* observation to the ldapfusers dataset.  This example expects     */
          /* valid users to have an emplyeeID.  If your ActiveDirectory does */
          /* not use the employeeID attribute, then this condition will need */ 
          /* to be modified.  The condition should resolve to true only when */
          /* the current entry should be defined in the metadata as a user.  */
          /*                                                                 */
          /* Note: Changing the expression below to simply use               */
          /*       distinguishedName instead of employeeID may not be useful.*/
          /*       Every entry will have a distinguishedName, thus the       */
          /*       expression would always be true and no entries would be   */
          /*       filtered.                                                 */
          /*******************************************************************/
          if distinguishedName NE "" then
             output &extractlibref..ldapfusers; /* output to ldapfusers dataset */

       end;  /* end of entry loop */

       /* free search resources */
       if shandle NE 0 then do;
          call ldaps_free(shandle,rc);
          if rc NE 0 then do;
             msg = sysmsg();
             put msg;
          end;
       end;

%mend;

        
/*********************************************************************************************/
/* The following datastep extracts user information from an AD using the ldap datastep       */
/* call interface and the %ldapextrpersons macro defined above.                              */
/*                                                                                           */
/* Because some AD servers will limit the number of directory entries retrieved on a single  */
/* search, this datastep is built with a series of filters.  Each setting of the variable    */
/* 'filter' below is used in the %ldapextrpersons macro invocation that follows it.          */
/*                                                                                           */
/* You may freely modify the filter= values according to restrictions imposed at your site   */
/* and the number/selection criteria of users being imported.  Just make sure that each      */
/* filter='your_filter_value" string is followed immediately by %ldapextrpersons.            */
/*********************************************************************************************/

data &extractlibref..ldapfusers                                                               
     (keep= displayName streetAddress cn company mail employeeID facsimileTelephoneNumber 
            distinguishedName l mobile otherTelephone physicalDeliveryOfficeName postalCode name 
            sAMAccountName st telephoneNumber co title whenChanged whenCreated department UserPasswordExpiryTimeComputed);

     length entryname $200 attrName $100 value $600 filter $100
            displayName $256 streetAddress $100 cn $40 company $50 mail $50 
            employeeID $30 facsimileTelephoneNumber $50 distinguishedName $200
            l $50 mobile $50 otherTelephone $50 physicalDeliveryOfficeName $50
            postalCode $20 name $60 sAMAccountName $20 st $20 telephoneNumber $50
            co $50 title $50 whenChanged $30 whenCreated $30 department $100 UserPasswordExpiryTimeComputed $50;

     handle = 0;
     rc     = 0;
     option = "OPT_REFERRALS_ON";
    
     /* open connection to LDAP server */     
     call ldaps_open( handle, &ADServer, &ADPort, &ADPerBaseDN, &ADBindUser, &ADBindPW, rc, option ); 
     if rc NE 0 then do;
        msg = sysmsg();
        put msg;
     end;  
     
     timeLimit=0;
     sizeLimit=0;       
     base='';  /* use default set at _open time */
     referral = "OPT_REFERRALS_ON";
     restart = ""; /* use default set at _open time */
     
     call ldaps_setOptions(handle, timeLimit, sizeLimit, base, referral, restart, rc);           

     filter="(&(displayName>=A)(displayName<=C)  )";
     %ldapextrpersons
     
     filter="(&(displayName>=C)(displayName<=D)  )";
     %ldapextrpersons
     
     filter="(&(displayName>=D)(displayName<=E)    )";
     %ldapextrpersons
     
     filter="(&(displayName>=E)(displayName<=G)    )";
     %ldapextrpersons

     filter="(&(displayName>=G)(displayName<=I)   )";
     %ldapextrpersons
     
     filter="(&(displayName>=I)(displayName<=K)    )";
     %ldapextrpersons
     
     filter="(&(displayName>=K)(displayName<=M)   )";
     %ldapextrpersons
     
     filter="(&(displayName>=M)(displayName<=O)    )";
     %ldapextrpersons
    
     filter="(&(displayName>=O)(displayName<=Q)   )";
     %ldapextrpersons
     
     filter="(&(displayName>=Q)(displayName<=S)    )";
     %ldapextrpersons
     
     filter="(&(displayName>=S)(displayName<=T)    )";
     %ldapextrpersons
     
     filter="(&(displayName>=T)(displayName<=U)    )";
     %ldapextrpersons
     
     filter="( displayName>=U )";
     %ldapextrpersons
 
     /* close connection to LDAP server */
     call ldaps_close(handle,rc);
     if rc NE 0 then do;
        msg = sysmsg();
        put msg;
     end;
run;

proc sql;
create table &extractlibref..ldapfusers
as select case when distinguishedName like '%OU=SI%' then 'SI' else
          case when distinguishedName like '%OU=UAP Modules%' then 'UAP Modules' else
          case when distinguishedName like '%OU=Logistique%' then 'Logistique' else
          case when distinguishedName like '%OU=Achats%' then 'Achats' else
          case when distinguishedName like '%OU=Maintenance%' then 'Maintenance' else
          case when distinguishedName like '%OU=Qualite et SAV%' then 'Qualite' else
          case when distinguishedName like '%OU=Commercial%' then 'Commercial' else
          case when distinguishedName like '%OU=UAP Cellules%' then 'UAP Cellules' else
          case when distinguishedName like '%OU=UAP Wafer%' then 'UAP Wafer' else
          case when distinguishedName like '%OU=HSE%' then 'HSE' else
          case when distinguishedName like '%OU=Methodes Indus%' then 'Methodes Indus' else
          case when distinguishedName like '%OU=Direction%' then 'Direction' else
          case when distinguishedName like '%OU=RH%' then 'RH' else
          case when distinguishedName like '%OU=Controle gestion%' then 'Controle gestion' else
          case when distinguishedName like '%OU=Finance%' then 'Finance' else
          case when distinguishedName like '%OU=Process%' then 'Process' else
          case when distinguishedName like '%OU=R&D%' then 'R&D' else '' end
          end end end end end end end end end end end end end end end end as department,
* from &extractlibref..ldapfusers
where 
(
distinguishedName like '%OU=SI%' or
distinguishedName like '%OU=UAP Modules%' or
distinguishedName like '%OU=Logistique%' or
distinguishedName like '%OU=Achats%' or
distinguishedName like '%OU=Maintenance%' or
distinguishedName like '%OU=Qualite et SAV%' or
distinguishedName like '%OU=Commercial%' or
distinguishedName like '%OU=UAP Cellules%' or
distinguishedName like '%OU=UAP Wafer%' or
distinguishedName like '%OU=HSE%' or
distinguishedName like '%OU=Methodes Indus%' or
distinguishedName like '%OU=Direction%' or
distinguishedName like '%OU=RH%' or
distinguishedName like '%OU=Controle gestion%' or
distinguishedName like '%OU=Finance%' or
distinguishedName like '%OU=Process%' or
distinguishedName like '%OU=R&D%' or
distinguishedName like '%CN=COLLAGE%' or 
distinguishedName like '%CN=CONTROLE%' OR
distinguishedName like '%CN=CROISSANCE%' OR
distinguishedName like '%CN=MAINTENANCEDI%' OR
distinguishedName like '%CN=LESSIVIELLES%' OR
distinguishedName like '%CN=MAGASIN-SCIAGE%' OR
distinguishedName like '%CN=MAGASINCOL1%' OR
distinguishedName like '%CN=MAGASINCOL2%' OR
distinguishedName like '%CN=MAGASINSCIAGE%' OR
distinguishedName like '%CN=debitage%' OR
distinguishedName like '%CN=SCIAGE%' OR
distinguishedName like '%CN=PROD-MAG-COL1%' OR
distinguishedName like '%CN=SEPAR%' OR
distinguishedName like '%CN=TEXTU%'
)
/*and compress(mail) ne ''*/
and upcase(displayName) not like '%TEST%'
and upcase(displayName) not like '%ASTREINTE%';
quit;

data &extractlibref..ldapfusers;
set &extractlibref..ldapfusers;
IF  NOT MISSING(department) THEN department=upcase(department);
ELSE department='UAP WAFER';
sAMAccountName=lowcase(sAMAccountName);
cn=lowcase(cn);
name=lowcase(name);
run;
