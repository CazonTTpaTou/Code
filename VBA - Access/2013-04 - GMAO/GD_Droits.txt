Attribute VB_Name = "GD_Droits"
Option Compare Database
Option Explicit

' N.B. le champ GD_Utilisateur.autoriseAD booléen sur Access devient numérique avec SQL-Server


Public Declare Function LogonUser Lib "advapi32.dll" Alias "LogonUserA" _
        (ByVal lpszUsername As String, _
        ByVal lpszDomain As String, _
        ByVal lpszPassword As String, _
        ByVal dwLogonType As Long, _
        ByVal dwLogonProvider As Long, _
        phToken As Long) As Long

Const LOGON32_LOGON_INTERACTIVE As Long = 2
Const LOGON32_LOGON_NETWORK As Long = 3
Const LOGON32_PROVIDER_DEFAULT As Long = 0
Const LOGON32_PROVIDER_WINNT50 As Long = 3
Const LOGON32_PROVIDER_WINNT40 As Long = 2
Const LOGON32_PROVIDER_WINNT35 As Long = 1
'--------------------------
'
'  Module commun de gestion des droits d'Accès
'
' Ce module a besoin des :
' Tables
' - GD_droit
' - GD_droit_groupe
' - GD_droit_utilisateur
' - GD_groupe
' - GD_utilisateur
' - GD_utilisateur_groupe

' Formulaires
' - GD_frmAdmin
' - GD_Login
'
'
'  les deux constantes ci dessous sont propre à l'ative directory de photowatt.
'--------------------------
Private Const GD_nomDomaine As String = "photowatt"
Private Const GD_nomextension As String = "local"

'--------------------------
'
' DEBUG
'
' passer a false pour supprimer toutes les vérifications AD
'
'--------------------------
'Private Const GD_CheckAD As Boolean = True


'--------------------------
'
'  Collection de droits de l'utilisateur loggé sur le poste.
'
'  cette collection est initialisée par la méthode GD_initialisation
'
'--------------------------
Private mCDroits As Collection

'--------------------------
'
' Utilisateur connecté
'
'--------------------------
Private msUser As String

'--------------------------
'
' Initialisation des droits :
'
' le groupeAD passé en parametre est le nom du groupe dans lequel l'utilisateur doit
' etre pour accéder à l'application.
'
' Cette fonction renvoi vrai si l'utilisateur est dans le groupe AD,
' et charge l'ensemble des droits auxquels il a accès via la structure de
' base de données composées des 6 tables de gestion des droits GD_******
'
'
'--------------------------
Public Function GD_initialisation() As Boolean
    GD_initialisation = False
     '--------------------------
    '
    ' etape un : vérification de l'appartenance de l'utilisateur au groupe Active directory
    '
    '--------------------------
     'récupération du login de l'utilisateur
         If msUser = "" Then
             msUser = Environ("USERNAME")
         End If
         If GD_CheckAD Then
       
        
        Dim adoConnection As ADODB.Connection
        Dim adoCommand As ADODB.Command
        Dim adoRecordset As ADODB.Recordset
        Dim strBase As String
        Dim strFilter As String
        Dim strAttributes As String
        Dim strQuery As String
        Dim listGroups() As Variant
        Dim i As Integer
        'Initialisation des objets ADO
        Set adoCommand = New ADODB.Command
        Set adoConnection = New ADODB.Connection
        Set adoRecordset = New ADODB.Recordset
        
        adoConnection.Provider = "ADsDSOObject"
        adoConnection.Open "Active Directory Provider"
        adoCommand.ActiveConnection = adoConnection
        adoCommand.Properties("Searchscope") = 2
 
        
         adoCommand.CommandText = "SELECT sAMAccountName " _
                    & "FROM 'LDAP://dc=" & GD_nomDomaine & ";dc=" & GD_nomextension & "' " _
                    & "WHERE  objectClass='user' " _
                    & " AND sAMAccountName='" & msUser _
                    & "' AND memberOf='CN=" & GD_nomGroupeAD & ",OU=Applications et Databases,OU=Groupes,DC=photowatt,DC=local'"
        
        adoCommand.Properties("Page Size") = 300
        adoCommand.Properties("Timeout") = 30
        adoCommand.Properties("Cache Results") = False
        
        'Exécution de la requête
        On Error Resume Next
        Set adoRecordset = adoCommand.Execute
        If Err <> 0 Then
            GD_initialisation = False
            Exit Function
        End If
        On Error GoTo 0
        'Parcours des résultats de la requête
        If Not adoRecordset.EOF Then
             GD_initialisation = True
        Else
            GD_initialisation = False
        End If
      '    'On stocke l'ensemble des groupes dans un tableau de variants
      '      If Not IsNull(adoRecordset.Fields("memberOf")) Then
      '         listGroups = adoRecordset.Fields("memberOf").Value
      '         'Pour chaque élément du tableau
      '         For i = 0 To UBound(listGroups)
      '             Dim chaine_groupe As Variant
      '             Dim groupeTmp As String
      '             chaine_groupe = listGroups(i)
      '             'On extrait la donnée qui nous intéresse (le nom exact du groupe)
      '             groupeTmp = Mid(chaine_groupe, InStr(chaine_groupe, "CN=") + 3, InStr(chaine_groupe, ",OU=") - 4)
      '              If groupeTmp = GD_nomGroupeAD Then
      '                  GD_initialisation = True
      '              End If
      '         Next
      '      End If
      '      ' Move to the next record in the recordset.
      ''
        ' Clean up.
        adoRecordset.Close
        adoConnection.Close
    Else
        'on ne check pas l'AD on check uniquement la structure de base
        GD_initialisation = Nz(DLookup("autoriseAD", "GD_utilisateur", "login = """ & msUser & """"), False)
    End If
    
    '--------------------------
    '
    ' Etape 2 :
    ' si l'utilisateur est autorisé, les droits sont chargés,
    ' sinon il est topé comme non autorisé dans la table utilisateur.
    '
    '--------------------------
    If GD_initialisation Then
        Set mCDroits = New Collection
            
        'recherche de l'utilisateur dans la table droit
        Dim idUtilisateur As Long
        idUtilisateur = Nz(DLookup("idUtilisateur", "GD_utilisateur", "login = """ & msUser & """"), 0)
        
        'création s'il n'existe pas
        If idUtilisateur = 0 Then
            CurrentDb.Execute "insert into GD_Utilisateur (login, autoriseAD) Values (""" & msUser & """, 1)", dbSeeChanges
            'on peut sortir, il n'aura pas de droits particulier par défaut.
            Exit Function
        Else
            'on tope son login à true s'il existe en base
            CurrentDb.Execute "update GD_Utilisateur set autoriseAD = true where login = """ & msUser & """", dbSeeChanges
        End If
        
        'lecture des droits de l'utilisateur.
        Dim strsql As String
        Dim code As String
                
        strsql = "select GD_droit.code from GD_droit inner join GD_droit_utilisateur " _
            & " on GD_droit.idDroit = GD_droit_utilisateur.idDroit " _
            & " where GD_droit_utilisateur.idUtilisateur = " & idUtilisateur
        
        Dim rs As DAO.Recordset
        Set rs = CurrentDb.OpenRecordset(strsql, dbOpenForwardOnly)
        While Not rs.EOF
            If Not GD_estAutorise(rs![code]) Then
                code = rs![code]
                mCDroits.Add code
            End If
            rs.MoveNext
        Wend
        rs.Close
        
        ' lecture des droits donnés par le groupe
        strsql = "select GD_droit.code from ( GD_droit " _
            & " inner join GD_droit_groupe on GD_droit.idDroit = GD_droit_groupe.idDroit ) " _
            & " inner join GD_utilisateur_groupe on GD_droit_groupe.idGroupe = GD_utilisateur_groupe.idGroupe " _
            & " where GD_utilisateur_groupe.idUtilisateur = " & idUtilisateur
        
        Set rs = CurrentDb.OpenRecordset(strsql, dbOpenForwardOnly)
        While Not rs.EOF
            If Not GD_estAutorise(rs![code]) Then
                code = rs![code]
                mCDroits.Add code
            End If
            rs.MoveNext
        Wend
        rs.Close
    Else
        'utilisateur non autorisé au niveau de l'AD.
        'on tope son login à false s'il existe en base
        CurrentDb.Execute "update GD_Utilisateur set autoriseAD = false where login = """ & msUser & """", dbSeeChanges
    End If
End Function


'--------------------------
'
' renvoie vrai si le droit demandé (par son code) est dans la liste des droits chargés pour
'   l'utilisateur à l'initialisation du module.
'
'--------------------------
Public Function GD_estAutorise(codeDroit As String) As Boolean
    'valeur par défaut = false
    GD_estAutorise = False
    If mCDroits Is Nothing Then
        Set mCDroits = New Collection
    End If
    Dim i As Long
    For i = 1 To mCDroits.Count
        If mCDroits.Item(i) = codeDroit Then
            GD_estAutorise = True
            Exit Function
        End If
    Next
End Function


'inistialise la liste des utilisateurs autorisés dans l'AD
'
' créé les utilisateurs non déclarés dans l'appli
' décoche les utilisateurs non déclarés dans l'AD
Public Sub GD_InitialiseListeUtilisateurAutorises()

   If GD_CheckAD Then
        
        
        Dim adoConnection As ADODB.Connection
        Dim adoCommand As ADODB.Command
        Dim adoRecordset As ADODB.Recordset
        Dim strBase As String
        Dim strFilter As String
        Dim strAttributes As String
        Dim strQuery As String
        Dim listUsers() As Variant
         Dim chaine_user As Variant
                    Dim userTmp As String
                  Dim i As Integer
        Dim idtmp As Long
        'Initialisation des objets ADO
        Set adoCommand = New ADODB.Command
        Set adoConnection = New ADODB.Connection
        Set adoRecordset = New ADODB.Recordset
        
        adoConnection.Provider = "ADsDSOObject"
        adoConnection.Open "Active Directory Provider"
        adoCommand.ActiveConnection = adoConnection
        adoCommand.Properties("Searchscope") = 2
       
        adoCommand.CommandText = "SELECT sAMAccountName, distinguishedName " _
                & "FROM 'LDAP://dc=" & GD_nomDomaine & ";dc=" & GD_nomextension & "' " _
                & "WHERE objectCategory='person'  AND objectClass='user' " _
                & " AND memberOf='CN=" & GD_nomGroupeAD & ",OU=Applications et Databases,OU=Groupes,DC=photowatt,DC=local'"
     
        
        adoCommand.Properties("Page Size") = 1000
        adoCommand.Properties("Timeout") = 30
        adoCommand.Properties("Cache Results") = False
        'Exécution de la requête
        On Error Resume Next
        Set adoRecordset = adoCommand.Execute
        If Err <> 0 Then
           
           Err.Clear
            Exit Sub
        End If
         On Error GoTo 0
        'Connexion ok, on décoche tout le monde
        CurrentDb.Execute "update GD_utilisateur set autoriseAD = false", dbSeeChanges
        
              'Parcours des résultats de la requête
             
        Do Until adoRecordset.EOF
            'On stocke l'ensemble des groupes dans un tableau de variants
            'MsgBox adoRecordset.Fields("sAMAccountName")
            
            
            If Not IsNull(adoRecordset.Fields("sAMAccountName")) Then
                userTmp = adoRecordset.Fields("sAMAccountName")
                idtmp = Nz(DLookup("idUtilisateur", "GD_utilisateur", "login = """ & userTmp & """"), 0)
                
                If idtmp > 0 Then
                    CurrentDb.Execute "update GD_utilisateur set autoriseAD = true where idUtilisateur = " & idtmp, dbSeeChanges
                Else
                    CurrentDb.Execute "insert into GD_utilisateur (login, autoriseAD) values ( """ & userTmp & """,  true )", dbSeeChanges
                End If
            End If
            
            ' Move to the next record in the recordset.
            adoRecordset.MoveNext
        Loop
        
        ' Clean up.
        adoRecordset.Close
        adoConnection.Close
    End If
  

    

End Sub




Public Function GD_VerifieMotDePasseAD(login As String, motDePasse As String) As Boolean
Dim token As Long
GD_VerifieMotDePasseAD = False
    If GD_CheckAD Then
        If LogonUser(login, GD_nomDomaine & "." & GD_nomextension, motDePasse, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, token) = 1 Then
            GD_VerifieMotDePasseAD = True
        Else
            GD_VerifieMotDePasseAD = False
        End If
    Else
        GD_VerifieMotDePasseAD = True
    End If
    
    
    ' Modif. DBE
    If GD_VerifieMotDePasseAD Then
        msUser = login
    End If

End Function

Public Function GD_Utilisateur() As String

' Modif. DBE

    GD_Utilisateur = msUser
    
End Function

