/*
-- remodéliser une table produit pour gérer les versions de données

-- créer 4 tables comme suit :
T_PRODUIT_PRD --> PRD_ID auto incrémenté
T_PRODUIT_DESIGNATION --> PRD_ID, DESIGNATION, DATE_APPLICATION
T_PRODUIT_PRIX --> PRD_ID, PRIX_HT, DATE_APPLICATION
T_PRODUIT_TVA --> PRD_ID, TAUX_TVA, DATE_APPLICATION

SET NOCOUNT ON;

CREATE TABLE T_NUM (N INT NOT NULL);
GO
INSERT INTO T_NUM VALUES (0);
GO
INSERT INTO T_NUM SELECT MAX(N) + 1 FROM T_NUM;
GO 9
INSERT INTO T_NUM
SELECT T1.N + 10*T2.N + 100*T3.N + 1000*T4.N
FROM   T_NUM AS T1
       CROSS JOIN T_NUM AS T2
       CROSS JOIN T_NUM AS T3
       CROSS JOIN T_NUM AS T4
WHERE  T1.N + 10*T2.N + 100*T3.N + 1000*T4.N > 9
GO
UPDATE T_NUM SET N = N +1;
GO
ALTER TABLE T_NUM ADD CONSTRAINT PK_NUM PRIMARY KEY (N)
GO

*/

CREATE DATABASE DB_TEST_DEV
GO

USE DB_TEST_DEV
GO

CREATE FUNCTION F_OVERLAPS (@DD1 DATETIME2, @DF1 DATETIME2, @DD2 DATETIME2, @DF2 DATETIME2)
RETURNS BIT
AS
BEGIN
    IF @DD2 >= @DF1 RETURN 0;
    IF @DF2 <= @DD1 RETURN 0;
    RETURN 1;
END;
GO

CREATE TABLE T_PRODUIT_PRD
(PRD_ID           INT IDENTITY PRIMARY KEY);
GO

CREATE VIEW V_PRD
AS
SELECT PRD_ID
FROM   T_PRODUIT_PRD

CREATE TABLE T_PRODUIT_DESIGNATION
(PRD_ID           INT REFERENCES T_PRODUIT_PRD (PRD_ID) ON DELETE CASCADE,
 PRD_DESIGNATION  VARCHAR(250) NOT NULL,
 PRD_D_DES        DATE NOT NULL DEFAULT GETDATE(),
 PRIMARY KEY (PRD_ID, PRD_D_DES));
GO

CREATE TABLE T_PRODUIT_PRIX
(PRD_ID           INT REFERENCES T_PRODUIT_PRD (PRD_ID) ON DELETE CASCADE,
 PRD_PRIX         DECIMAL(16,2) NOT NULL,
 PRD_D_PRX        DATE NOT NULL DEFAULT GETDATE(),
 PRIMARY KEY (PRD_ID, PRD_D_PRX));
GO

CREATE TABLE T_PRODUIT_TVA
(PRD_ID           INT REFERENCES T_PRODUIT_PRD (PRD_ID) ON DELETE CASCADE,
 PRD_TVA          FLOAT NOT NULL,
 PRD_D_TVA        DATE NOT NULL DEFAULT GETDATE(),
 PRIMARY KEY (PRD_ID, PRD_D_TVA));
GO

CREATE VIEW V_PRODUIT_DESIGNATION
AS
SELECT PRD_ID, PRD_DESIGNATION, PRD_D_DES AS PRD_DES_DEBUT,
       COALESCE((SELECT MIN(PRD_D_DES)
                 FROM   T_PRODUIT_DESIGNATION AS Tin
                 WHERE  Tin.PRD_ID = Tout.PRD_ID
                   AND  Tin.PRD_D_DES > Tout.PRD_D_DES), '9999-12-31') AS PRD_DES_FIN
FROM   T_PRODUIT_DESIGNATION AS Tout
GO

CREATE VIEW V_PRODUIT_PRIX
AS
SELECT PRD_ID, PRD_PRIX, PRD_D_PRX AS PRD_PRX_DEBUT,
       COALESCE((SELECT MIN(PRD_D_PRX)
                 FROM   T_PRODUIT_PRIX AS Tin
                 WHERE  Tin.PRD_ID = Tout.PRD_ID
                   AND  Tin.PRD_D_PRX > Tout.PRD_D_PRX), '9999-12-31') AS PRD_PRX_FIN
FROM   T_PRODUIT_PRIX AS Tout
GO

CREATE VIEW V_PRODUIT_TVA
AS
SELECT PRD_ID, PRD_TVA, PRD_D_TVA AS PRD_TVA_DEBUT,
       COALESCE((SELECT MIN(PRD_D_TVA)
                 FROM   T_PRODUIT_TVA AS Tin
                 WHERE  Tin.PRD_ID = Tout.PRD_ID
                   AND  Tin.PRD_D_TVA > Tout.PRD_D_TVA), '9999-12-31') AS PRD_TVA_FIN
FROM   T_PRODUIT_TVA AS Tout
GO
/*
DECLARE @NEWID INT;
INSERT INTO [dbo].[T_PRODUIT_PRD] DEFAULT VALUES;
SET @NEWID = SCOPE_IDENTITY();
INSERT INTO T_PRODUIT_PRIX VALUES (@NEWID, 123.45, '2012-01-01');
INSERT INTO T_PRODUIT_DESIGNATION VALUES (@NEWID, 'Pelle à gâteaux', '2012-01-06');
INSERT INTO T_PRODUIT_TVA VALUES (@NEWID, 17.6, '2012-01-01');
INSERT INTO T_PRODUIT_PRIX VALUES (@NEWID, 125.00, '2014-07-01');
INSERT INTO T_PRODUIT_PRIX VALUES (@NEWID, 130.00, '2015-09-01');
INSERT INTO T_PRODUIT_TVA VALUES (@NEWID, 19.6, '2013-06-30');
*/

CREATE VIEW V_PRODUIT_HISTORIQUE
AS
WITH T AS
(
SELECT PRD_ID, PRD_DES_DEBUT AS D
FROM   V_PRODUIT_DESIGNATION
UNION ALL
SELECT PRD_ID, PRD_DES_FIN AS D
FROM   V_PRODUIT_DESIGNATION
UNION ALL
SELECT PRD_ID, PRD_PRX_DEBUT AS D
FROM   V_PRODUIT_PRIX
UNION ALL 
SELECT PRD_ID, PRD_PRX_FIN AS D
FROM   V_PRODUIT_PRIX
UNION ALL 
SELECT PRD_ID, PRD_TVA_DEBUT AS D
FROM   V_PRODUIT_TVA
UNION ALL
SELECT PRD_ID, PRD_TVA_FIN AS D
FROM   V_PRODUIT_TVA
),
T_TRANCHES AS
(
SELECT DISTINCT PRD_ID, T1.D AS DD, 
       (SELECT  MIN(T2.D)
        FROM    T AS T2
        WHERE   T1.D < T2.D 
          AND   T1.PRD_ID = T2.PRD_ID) AS DF
FROM   T AS T1
WHERE  T1.D <= '9999-12-31'  
)
SELECT P.PRD_ID, DD AS DATE_DEBUT, DF AS DATE_FIN, 
       PRD_DESIGNATION, PRD_PRIX, PRD_TVA
FROM T_TRANCHES AS P
     LEFT OUTER JOIN V_PRODUIT_DESIGNATION AS PD
           ON P.PRD_ID = PD.PRD_ID
           AND dbo.F_OVERLAPS(DD, DF, PD.PRD_DES_DEBUT, PD.PRD_DES_FIN) = 1
     LEFT OUTER JOIN V_PRODUIT_PRIX AS PP 
           ON P.PRD_ID = PP.PRD_ID
           AND dbo.F_OVERLAPS(DD, DF, PP.PRD_PRX_DEBUT, PP.PRD_PRX_FIN) = 1
     LEFT OUTER JOIN V_PRODUIT_TVA AS PT
           ON P.PRD_ID = PT.PRD_ID
           AND dbo.F_OVERLAPS(DD, DF, PT.PRD_TVA_DEBUT, PT.PRD_TVA_FIN) = 1
WHERE DF IS NOT NULL;
GO


CREATE VIEW V_PRODUIT
AS
SELECT *
FROM   V_PRODUIT_HISTORIQUE
WHERE  GETDATE() BETWEEN DATE_DEBUT AND DATE_FIN
GO

SELECT * FROM V_PRODUIT

/* 
SELECT * FROM V_PRODUIT_TVA
SELECT * FROM V_PRODUIT_PRIX
SELECT * FROM V_PRODUIT_DESIGNATION
SELECT * FROM V_PRODUIT_HISTORIQUE
*/

-- créer la vue qui synthétise les données du produit
-- avant créer les vues qui présentent l'historisation sous la forme :
-- PRD_ID, ???, DATE_DEBUT_APPLICATION, DATE_FIN_APPLICATION (=DATE_DEBUT_APPLICATION supérieure - 1 journée)

-- première version "complétement ensembliste"
CREATE TRIGGER E_IOI_PRD
ON [dbo].[V_PRODUIT_HISTORIQUE]
INSTEAD OF INSERT
AS
SET NOCOUNT ON;

DECLARE @ID INT, @N INT;
DECLARE @T TABLE (ID INT);
DECLARE @TI TABLE (PRD_ID INT, 
                   DATE_DEBUT DATE, 
                   PRD_DESIGNATION VARCHAR(250), 
                   PRD_PRIX DECIMAL(16,2), 
                   PRD_TVA FLOAT);

-- la table inserted à toutes les colonnes de la vue dans laquelle on insère
BEGIN TRANSACTION;
BEGIN TRY

-- réservation de la plage de clef
SELECT @N = COUNT(*) FROM inserted;
SET @ID = IDENT_CURRENT('T_PRODUIT_PRD') + @N;
DBCC CHECKIDENT ('T_PRODUIT_PRD', RESEED, @ID);

-- insertion dans la table mère du produit
SET IDENTITY_INSERT T_PRODUIT_PRD ON;

INSERT INTO T_PRODUIT_PRD (PRD_ID)
OUTPUT inserted.PRD_ID INTO @T
SELECT @ID - N + 1 
FROM   [dbo].[T_NUM]
WHERE  N <= @N;

SET IDENTITY_INSERT T_PRODUIT_PRD OFF;

-- redéfinition des insertions avec l'ID final
WITH T1 AS (SELECT *, ROW_NUMBER() OVER(ORDER BY ID) AS RN1 FROM @T),
     T2 AS (SELECT *, ROW_NUMBER() OVER(ORDER BY PRD_TVA) AS RN2  FROM inserted)
INSERT INTO @TI
SELECT ID, COALESCE([DATE_DEBUT], GETDATE()), [PRD_DESIGNATION], PRD_PRIX, PRD_TVA 
FROM   T1  
       JOIN T2
            ON RN1 = RN2;

-- insertion de la désignation du produit

INSERT INTO [dbo].[T_PRODUIT_DESIGNATION]
SELECT PRD_ID, [PRD_DESIGNATION], [DATE_DEBUT]
FROM   @TI
WHERE  [PRD_DESIGNATION] IS NOT NULL;

-- insertion du prix du produit
INSERT INTO [dbo].[T_PRODUIT_PRIX]
SELECT PRD_ID, [PRD_PRIX], [DATE_DEBUT]
FROM   @TI
WHERE  [PRD_PRIX] IS NOT NULL;

-- insertion de la TVA
INSERT INTO [dbo].[T_PRODUIT_TVA]
SELECT PRD_ID, [PRD_TVA], [DATE_DEBUT]
FROM   @TI
WHERE  [PRD_TVA] IS NOT NULL;

COMMIT;

END TRY
BEGIN CATCH
   IF XACT_STATE() <> 0
      ROLLBACK;
   THROW;
END CATCH
GO


-- trigger avec curseur
CREATE TRIGGER E_IOI_PRD
ON [dbo].[V_PRODUIT_HISTORIQUE]
INSTEAD OF INSERT
AS
SET NOCOUNT ON;

DECLARE @PRD_ID     INT, 
        @DATE_DEBUT DATE, 
        @PRD_DESIGNATION VARCHAR(250), @PRD_PRIX DECIMAL, @PRD_TVA FLOAT;

DECLARE C CURSOR 
LOCAL FORWARD_ONLY STATIC READ_ONLY
FOR 
   SELECT PRD_ID, COALESCE(DATE_DEBUT, GETDATE()) AS DATE_DEBUT, PRD_DESIGNATION, PRD_PRIX, PRD_TVA
   FROM   inserted;

OPEN C;

-- la table inserted à toutes les colonnes de la vue dans laquelle on insère
BEGIN TRANSACTION;
BEGIN TRY

FETCH C INTO @PRD_ID, @DATE_DEBUT, @PRD_DESIGNATION, @PRD_PRIX, @PRD_TVA;

WHILE @@FETCH_STATUS = 0
BEGIN

   -- insertion dans la table mère du produit
   INSERT INTO T_PRODUIT_PRD 
   DEFAULT VALUES;
   SET @PRD_ID = SCOPE_IDENTITY();

   -- insertion de la désignation du produit
   INSERT INTO [dbo].[T_PRODUIT_DESIGNATION]
   SELECT @PRD_ID, @PRD_DESIGNATION, @DATE_DEBUT
   WHERE  @PRD_DESIGNATION IS NOT NULL;

   -- insertion du prix du produit
   INSERT INTO [dbo].[T_PRODUIT_PRIX]
   SELECT @PRD_ID, @PRD_PRIX, @DATE_DEBUT
   WHERE  @PRD_PRIX IS NOT NULL;

   -- insertion de la TVA
   INSERT INTO [dbo].[T_PRODUIT_TVA]
   SELECT @PRD_ID, @PRD_TVA, @DATE_DEBUT
   WHERE  @PRD_TVA IS NOT NULL;

   FETCH C INTO @PRD_ID, @DATE_DEBUT, @PRD_DESIGNATION, @PRD_PRIX, @PRD_TVA;

END;

COMMIT;

END TRY
BEGIN CATCH
   IF XACT_STATE() <> 0
      ROLLBACK;
   THROW;
END CATCH

CLOSE C;

DEALLOCATE C;
GO

-- trigger ensembliste pour la mise à jour
ALTER TRIGGER E_IOU_PRD
ON [dbo].[V_PRODUIT_HISTORIQUE]
INSTEAD OF UPDATE
AS
SET NOCOUNT ON;

-- la table inserted à toutes les colonnes de la vue dans laquelle on insère
BEGIN TRANSACTION;
BEGIN TRY

INSERT INTO [dbo].[T_PRODUIT_DESIGNATION]
SELECT PRD_ID, PRD_DESIGNATION, GETDATE()
FROM   inserted;

INSERT INTO [dbo].[T_PRODUIT_PRIX]
SELECT PRD_ID, PRD_PRIX, GETDATE()
FROM   inserted;

INSERT INTO [dbo].[T_PRODUIT_TVA]
SELECT PRD_ID, PRD_TVA, GETDATE()
FROM   inserted;

COMMIT;

END TRY
BEGIN CATCH
   IF XACT_STATE() <> 0
      ROLLBACK;
   THROW;
END CATCH
GO


ALTER TRIGGER E_IOD_PRD
ON [dbo].[V_PRODUIT_HISTORIQUE]
INSTEAD OF DELETE
AS
SET NOCOUNT ON;

BEGIN TRANSACTION;
BEGIN TRY

DELETE FROM [dbo].[T_PRODUIT_DESIGNATION]
WHERE  PRD_ID IN (SELECT PRD_ID FROM deleted);

DELETE FROM [dbo].[T_PRODUIT_PRIX]
WHERE  PRD_ID IN (SELECT PRD_ID FROM deleted);

DELETE FROM [dbo].[T_PRODUIT_TVA]
WHERE  PRD_ID IN (SELECT PRD_ID FROM deleted);

DELETE FROM [dbo].[T_PRODUIT_PRD]
WHERE  PRD_ID IN (SELECT PRD_ID FROM deleted);

COMMIT;

END TRY
BEGIN CATCH
   IF XACT_STATE() <> 0
      ROLLBACK;
   THROW;
END CATCH
GO


EXEC sp_refreshview '[dbo].[V_PRODUIT_HISTORIQUE]';
EXEC sp_refreshview @viewname = '[dbo].[V_PRODUIT_HISTORIQUE]';


DELETE FROM [dbo].[V_PRODUIT_HISTORIQUE] WHERE PRD_ID = 10



INSERT INTO [dbo].[V_PRODUIT_HISTORIQUE]
SELECT NULL, '2016-01-01', NULL, 'Pelle mêle', 10, 20
UNION 
SELECT NULL, '2016-01-01', NULL, 'La pelle du 18 juin', 500, 20
